# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    # Localization
    locale: 'en'
    country: 'NL'

    # This parameter defines the codes of the locales (languages) enabled in the application
    app_locales: en|fr|de|es|cs|nl|ru|uk|ro|pt_BR|pl|it|ja|id|ca|sl|hr|zh_CN

    # Email settings
    notification.email.sender_address: anonymous@example.com
    notification.email.sender_name: anonymous@example.com

    # SMS settings
    notification.sms.default_destination: ~
    notification.sms.sender: 'The Symfony Demo blog'
    notification.sms.twilio.client.sid: 'some-dummy-id'
    notification.sms.twilio.client.token: 'some-dummy-token'
    notification.sms.message_bird.client.access_key: 'some-dummy-access_key'

    # Push settings
    notification.push.one_signal.app_id: 'some-dummy-id'
    notification.push.one_signal.rest_api_key: 'some-dummy-key'

services:
    # default configuration for services in *this* file
    _defaults:
        # automatically injects dependencies in your services
        autowire: true
        # automatically registers your services as commands, event subscribers, etc.
        autoconfigure: true
        # this means you cannot fetch services directly from the container via $container->get()
        # if you need to do this, you can override this setting on individual services
        public: false
        # defines the scalar arguments once and apply them to any service defined/created in this file
        bind:
            $locales: '%app_locales%'
            $defaultLocale: '%locale%'
            $defaultFromEmailAddress: '%notification.email.sender_address%'
            $defaultFromEmailName: '%notification.email.sender_name%'
            $countryCode: '%country%'
            $smsSender: '%notification.sms.sender%'

    ####################################################################################################################
    # BATCH AUTO-WIRING
    ####################################################################################################################

    # Makes classes in src/ available to be used as services.
    # This creates a service per class whose id is the fully-qualified class name.
    Acme\App\:
        resource: '../src/*'
        # You can exclude directories or files but if a service is unused, it's removed anyway.
        # However, excluding these makes the auto-wiring faster and less prone to errors.
        exclude: '../src/**/{Entity,*Enum.php,*ValueObject.php,*Dto.php,*ViewModel.php}'

    # So we can use these fixtures
    Acme\App\Build\Fixture\Doctrine\:
        resource: '../build/Fixture/Doctrine/*'

    # Controllers are imported separately to make sure they're public,
    # and have a tag that allows actions to type-hint services.
    Acme\App\Presentation\Web\Core\:
        resource: '../src/Presentation/Web/Core/**/*Controller.php'
        tags: ['controller.service_arguments']

    Acme\PhpExtension\:
        resource: '../lib/php-extension/src/*'
        # You can exclude directories or files but if a service is unused, it's removed anyway.
        # However, excluding these makes the auto-wiring faster and less prone to errors.
        exclude: '../lib/php-extension/src/**/{Entity,*Enum.php,*ValueObject.php,*Dto.php,*ViewModel.php}'

    ####################################################################################################################
    # ADJUSTMENTS TO THE AUTO-WIRING
    ####################################################################################################################

    # When the service definition only contains arguments, you can omit the
    # 'arguments' key and define the arguments just below the service class
    # We make it lazy loaded so that we can get it from the container and inject it into the event dispatcher
    # without it being instantiated
    Acme\App\Core\Component\Blog\Application\Event\CommentCreatedListener:
        lazy:  true
        tags:
            - name: 'sync_event_dispatcher'
              event: 'Acme\App\Core\SharedKernel\Component\Blog\Application\Event\CommentCreatedEvent'
              method: notifyPostAuthorAboutNewComment

    Acme\App\Core\Component\Blog\Application\Notification\NewComment\Email\NewCommentEmailGenerator:
        tags:
            - name: 'Acme\App\Infrastructure\Notification\Strategy\Email\EmailNotificationStrategy'
              notification: 'Acme\App\Core\Component\Blog\Application\Notification\NewComment\NewCommentNotification'
              method: 'generate'
              # The voter is here just as an example of a notification voter, voters are not mandatory
              voterId: 'Acme\App\Core\Component\Blog\Application\Notification\NewComment\Email\NewCommentEmailVoter'
              voterMethod: 'shouldDispatchEmail'

    # There are several implementations of this interface, so we need to choose one of them
    Acme\App\Core\Port\Notification\Client\Sms\SmsNotifierInterface:
        class: Acme\App\Infrastructure\Notification\Client\Sms\MessageBird\MessageBirdClient

    Acme\App\Core\Port\Notification\NotificationServiceInterface:
        class: Acme\App\Infrastructure\Notification\NotificationService
        arguments:
            - '@Acme\App\Infrastructure\Notification\Strategy\Email\EmailNotificationStrategy'
            - '@Acme\App\Infrastructure\Notification\Strategy\Push\PushNotificationStrategy'
            - '@Acme\App\Infrastructure\Notification\Strategy\Sms\SmsNotificationStrategy'

    # There are several implementations of this interface, so we need to choose one of them
    Acme\App\Core\Port\Persistence\KeyValueStorageInterface:
        class: Acme\App\Infrastructure\Persistence\Doctrine\KeyValueStorage

    Acme\App\Core\Port\Persistence\QueryServiceRouter:
        - '@Acme\App\Infrastructure\Persistence\Doctrine\DqlPersistenceService'

    Acme\App\Core\Port\Validation\PhoneNumber\PhoneNumberValidatorInterface:
        class: Acme\App\Infrastructure\Validation\PhoneNumber\LibPhoneNumber\PhoneNumberValidator
        arguments:
            - '@libphonenumber\PhoneNumberUtil'

    # There are several implementations of this interface, so we need to choose one of them
    Acme\App\Infrastructure\Notification\Client\Email\SwiftMailer\Mapper\EmailMapper:
        class: Acme\App\Infrastructure\Notification\Client\Email\SwiftMailer\Mapper\SwiftEmailMapper

    Acme\App\Infrastructure\Notification\Client\Push\OneSignal\OneSignalClient:
        $appIDKey: '%notification.push.one_signal.app_id%'
        $restAPIKey: '%notification.push.one_signal.rest_api_key%'

    Acme\App\Infrastructure\Notification\Client\Sms\Twilio\TwilioClient:
        $countryCode: '%country%'
        $sender: '%notification.sms.sender%'
        $defaultDestination: '%notification.sms.default_destination%'

    Acme\App\Infrastructure\Notification\Strategy\Email\EmailNotificationStrategy:
        tags:
            - name: notification_strategy

    Acme\App\Infrastructure\Notification\Strategy\Push\PushNotificationStrategy:
        arguments:
            # There are several implementations of this interface, so we need to choose one of them
            $pushNotificationSettingsService: '@Acme\App\Infrastructure\Notification\Settings\PushNotificationSettingsService'
        tags:
            - name: notification_strategy

    Acme\App\Infrastructure\Notification\Strategy\Sms\SmsNotificationStrategy:
        arguments:
            # There are several implementations of this interface, so we need to choose one of them
            $smsNotificationSettingsService: '@Acme\App\Infrastructure\Notification\Settings\SmsNotificationSettingsService'
        tags:
            - name: notification_strategy

    Acme\App\Presentation\Web\Core\Exception\ExceptionController:
        public: true
        arguments:
            $debug: '%kernel.debug%'

    Acme\App\Presentation\Web\Core\Port\FlashMessage\FlashMessageServiceInterface:
        class: Acme\App\Presentation\Web\Infrastructure\FlashMessage\Symfony\FlashMessageService
        arguments:
            $flashBag: "@=service('session').getFlashBag()"

    libphonenumber\PhoneNumberUtil:
        factory: ['libphonenumber\PhoneNumberUtil', getInstance]

    MessageBird\Client:
        - '%notification.sms.message_bird.client.access_key%'

    Symfony\Bridge\PsrHttpMessage\HttpFoundationFactoryInterface:
        class: Symfony\Bridge\PsrHttpMessage\Factory\HttpFoundationFactory

    Symfony\Bridge\PsrHttpMessage\HttpMessageFactoryInterface:
        class: Symfony\Bridge\PsrHttpMessage\Factory\DiactorosFactory

    Twilio\Rest\Client:
        - '%notification.sms.twilio.client.sid%'
        - '%notification.sms.twilio.client.token%'
